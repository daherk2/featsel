// CHCGAPopulation.h automatically generated by bin/add_new_algorithm.pl
// in Fri May  4 11:19:48 2018.

//
// CHCGAPopulation.h -- definition of the class "CHCGAPopulation".
//
//    This file is part of the featsel program
//    Copyright (C) 2018  Marcelo S. Reis, Gustavo Estrela
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#ifndef CHCGAPopulation_H_
#define CHCGAPopulation_H_

#include "ElementSet.h"
#include "ElementSubset.h"
#include "CostFunction.h"
#include <vector>

class CHCGAPopulation
{


private:

  // Defines an individual as an ElementSubset
  //
  typedef ElementSubset Individual;

  // Defines the population structure as a map<double, Individual *>
  //
  typedef multimap<double, Individual *> Population;

  // The current population
  //
  Population population;

  // The set of all possible elements an individual can hold
  //
  ElementSet * set;

  // The cost function used to evaluate each individual
  //
  CostFunction * c;

  // Stores the size of the population
  //
  unsigned int population_size;

public:

  // Default constructor.
  //
  CHCGAPopulation (ElementSet *, CostFunction *);

  // Default destructor.
  //
  virtual ~CHCGAPopulation ();

  // Starts a population with size given as a parameter
  //
  void start_population (unsigned int);

  // Starts a population with a given size containing a given individual
  //
  void start_population (unsigned int, ElementSubset *);

  // Mates current individuals and return a list of children
  //
  list<ElementSubset *> recombine ();

  // Combines two individuals
  //
  ElementSubset * combine_individuals (ElementSubset *, ElementSubset *);

  // Returns population size
  //
  unsigned int get_size ();

};

#endif /* CHCGAPopulation_H_ */
